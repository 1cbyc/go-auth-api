basePath: /api/v1
definitions:
  models.AuthResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.UpdateUserRequest:
    properties:
      active:
        type: boolean
      email:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  models.User:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      roles:
        items:
          type: string
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A sophisticated, production-ready authentication API built with Go
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go Auth API
  version: "1.0"
paths:
  /admin/users:
    get:
      description: Get a paginated list of all users (admin only)
      parameters:
      - description: 'Number of users to return (default: 10)'
        in: query
        name: limit
        type: integer
      - description: 'Number of users to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users list retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden - Admin role required
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - admin
  /admin/users/{id}:
    delete:
      description: Delete a specific user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid user ID
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden - Admin role required
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - admin
    get:
      description: Get a specific user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden - Admin role required
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Update a specific user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request data
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden - Admin role required
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: Login user
      tags:
      - authentication
  /auth/logout:
    post:
      description: Logout user and invalidate session
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            type: string
        "401":
          description: Invalid or expired refresh token
          schema:
            type: string
      summary: Refresh access token
      tags:
      - authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with username, email, and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            type: string
        "409":
          description: Username or email already exists
          schema:
            type: string
      summary: Register a new user
      tags:
      - authentication
  /health:
    get:
      description: Check the health status of the API
      produces:
      - application/json
      responses:
        "200":
          description: API is healthy
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - health
  /users/change-password:
    post:
      consumes:
      - application/json
      description: Change the current authenticated user's password
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request data or incorrect current password
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - users
  /users/profile:
    get:
      description: Get the current authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the current authenticated user's profile information
      parameters:
      - description: Profile update data
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request data
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
